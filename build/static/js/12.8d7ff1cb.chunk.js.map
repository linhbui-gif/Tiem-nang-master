{"version":3,"sources":["assets/images/image-contact.png","components/Select/index.ts","components/Select/Select.tsx","utils/hooks.ts","components/DatePicker/index.ts","components/DatePicker/DatePicker.tsx","containers/ContactForm/index.ts","containers/ContactForm/ContactForm.tsx","pages/Contact/Contact.tsx","pages/Contact/index.ts","components/TextArea/TextArea.tsx","components/TextArea/index.ts"],"names":["Select","placeholder","disabled","options","showSearch","value","className","defaultValue","allowClear","dropdownClassName","paginate","label","onSearch","onLoadMore","onChange","useState","keyword","setKeyword","isMounted","setIsMounted","searchValueDebounce","delay","debouncedValue","setDebouncedValue","useEffect","handleDebounce","setTimeout","clearTimeout","useDebounce","ETimeoutDebounce","SEARCH","handleScrollEnd","page","getTotalPage","total","pageSize","classNames","labelInValue","suffixIcon","Icon","name","EIconName","CaretDown","filterOption","input","option","searchString","keywordValue","undefined","searchValue","getPopupContainer","trigger","onClear","dropdownRender","menu","WrapperLazyLoad","maxHeight","onEnd","virtual","DatePicker","disabledDate","locale","format","EFormat","DATE","Calendar","color","EIconColor","SILVER","ContactForm","dispatch","useDispatch","Form","useForm","form","profileState","useSelector","state","profileReducer","getProfileResponse","data","getAdvisoryIssuesState","advisoryReducer","getAdvisoryIssuesResponse","records","requestAdvisoryLoading","loadingReducer","ERequestAdvisoryAction","REQUEST_ADVISORY","advisoryIssuesOptions","map","item","_id","handleRequestAdvisorySuccess","showNotification","ETypeNotification","SUCCESS","resetFields","getAdvisoryIssues","useCallback","params","DEFAULT_PAGE","getAdvisoryIssuesAction","request","setFieldsValue","onFinish","values","body","issueType","requestAdvisoryAction","gutter","span","sm","Item","rules","validationRules","required","Input","date","valueOf","moment","subtract","emailOrPhoneNumber","TextArea","Button","title","htmlType","Contact","lg","src","ImageContactBanner","alt","AntdTextArea","size"],"mappings":"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","file":"static/js/12.8d7ff1cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image-contact.0863b672.png\";","import Select from './Select';\r\n\r\nexport * from './Select.types';\r\nexport default Select;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Select as AntdSelect } from 'antd';\r\nimport classNames from 'classnames';\r\n\r\nimport { getTotalPage, searchString } from '@/utils/functions';\r\nimport { useDebounce } from '@/utils/hooks';\r\nimport { ETimeoutDebounce } from '@/common/enums';\r\nimport WrapperLazyLoad from '@/components/WrapperLazyLoad';\r\n\r\nimport { TSelectProps } from './Select.types';\r\nimport './Select.scss';\r\nimport Icon, { EIconName } from '@/components/Icon';\r\n\r\nconst Select: React.FC<TSelectProps> = ({\r\n  placeholder,\r\n  disabled,\r\n  options = [],\r\n  showSearch,\r\n  value,\r\n  className,\r\n  defaultValue,\r\n  allowClear,\r\n  dropdownClassName,\r\n  paginate,\r\n  label,\r\n  onSearch,\r\n  onLoadMore,\r\n  onChange,\r\n}) => {\r\n  const [keyword, setKeyword] = useState<string>('');\r\n  const [isMounted, setIsMounted] = useState<boolean>(false);\r\n  const searchValueDebounce = useDebounce(keyword, ETimeoutDebounce.SEARCH);\r\n\r\n  const filterOption = (input: string, option: any): boolean => {\r\n    return searchString(option.label, keyword);\r\n  };\r\n\r\n  const handleSearch = (keywordValue: string): void => {\r\n    setKeyword(keywordValue);\r\n  };\r\n\r\n  const dropdownRender = (menu: React.ReactElement): React.ReactElement => {\r\n    return (\r\n      <div className={classNames('Select-dropdown', dropdownClassName)}>\r\n        <div className=\"Select-dropdown-main\">\r\n          <WrapperLazyLoad maxHeight={400} onEnd={handleScrollEnd}>\r\n            {menu}\r\n          </WrapperLazyLoad>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleScrollEnd = (): void => {\r\n    if (onSearch && paginate) {\r\n      const isLoadMore = paginate.page < getTotalPage(paginate.total, paginate.pageSize);\r\n      if (isLoadMore) {\r\n        onLoadMore?.();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClear = (): void => {\r\n    onChange?.(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isMounted && onSearch) {\r\n      onSearch?.(searchValueDebounce);\r\n    }\r\n\r\n    setIsMounted(true);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchValueDebounce]);\r\n\r\n  return (\r\n    <div className={classNames('Select', className)}>\r\n      {label && <div className=\"Select-label\">{label}</div>}\r\n      <AntdSelect\r\n        className=\"Select-control\"\r\n        value={value}\r\n        showSearch={showSearch}\r\n        placeholder={placeholder}\r\n        defaultValue={defaultValue}\r\n        labelInValue\r\n        suffixIcon={<Icon name={EIconName.CaretDown} />}\r\n        allowClear={allowClear}\r\n        filterOption={onSearch ? false : filterOption}\r\n        onSearch={showSearch ? handleSearch : undefined}\r\n        options={options}\r\n        searchValue={keyword}\r\n        dropdownClassName={classNames('Select-dropdown', dropdownClassName)}\r\n        getPopupContainer={(trigger: HTMLElement): HTMLElement => trigger}\r\n        onChange={onChange}\r\n        onClear={handleClear}\r\n        dropdownRender={dropdownRender}\r\n        disabled={disabled}\r\n        virtual={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\ntype TScroll = {\r\n  x: number;\r\n  y: number;\r\n  direction: string;\r\n};\r\n\r\nexport const useDebounce = (value: string, delay: number): string => {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handleDebounce = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return (): void => {\r\n      clearTimeout(handleDebounce);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n};\r\n\r\nexport const useScroll = (): TScroll => {\r\n  const [scroll, setScroll] = useState<TScroll>({\r\n    x: document.body.getBoundingClientRect().left,\r\n    y: document.body.getBoundingClientRect().top,\r\n    direction: '',\r\n  });\r\n\r\n  const listener = (): void => {\r\n    setScroll((prev: TScroll) => ({\r\n      x: document.body.getBoundingClientRect().left,\r\n      y: -document.body.getBoundingClientRect().top,\r\n      direction: prev.y > -document.body.getBoundingClientRect().top ? 'up' : 'down',\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', listener);\r\n    return (): void => window.removeEventListener('scroll', listener);\r\n  }, []);\r\n\r\n  return scroll;\r\n};\r\n\r\nexport const useOnClickOutside = (\r\n  ref: React.RefObject<HTMLElement>,\r\n  handler: (event: MouseEvent | TouchEvent) => void,\r\n): void => {\r\n  useEffect(() => {\r\n    const listener = (event: MouseEvent | TouchEvent): void => {\r\n      if (!ref.current || ref.current.contains(event.target as Node)) {\r\n        return;\r\n      }\r\n      handler(event);\r\n    };\r\n    document.addEventListener('mousedown', listener);\r\n    document.addEventListener('touchstart', listener);\r\n    return (): void => {\r\n      document.removeEventListener('mousedown', listener);\r\n      document.removeEventListener('touchstart', listener);\r\n    };\r\n  }, [ref, handler]);\r\n};\r\n","import DatePicker from './DatePicker';\r\n\r\nexport * from './DatePicker.types';\r\nexport default DatePicker;\r\n","import React from 'react';\r\nimport { DatePicker as AntdDatePicker } from 'antd';\r\nimport classNames from 'classnames';\r\nimport 'moment/locale/vi';\r\nimport locale from 'antd/es/date-picker/locale/vi_VN';\r\n\r\nimport { EFormat } from '@/common/enums';\r\nimport Icon, { EIconColor, EIconName } from '@/components/Icon';\r\n\r\nimport { TDatePickerProps } from './DatePicker.types';\r\nimport './DatePicker.scss';\r\n\r\nconst DatePicker: React.FC<TDatePickerProps> = ({\r\n  className,\r\n  value,\r\n  placeholder,\r\n  disabled,\r\n  label,\r\n  disabledDate,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <div className={classNames('DatePicker', className)}>\r\n      {label && <div className=\"DatePicker-label\">{label}</div>}\r\n\r\n      <AntdDatePicker\r\n        locale={locale}\r\n        format={EFormat.DATE}\r\n        value={value}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n        onChange={onChange}\r\n        disabledDate={disabledDate}\r\n        suffixIcon={<Icon name={EIconName.Calendar} color={EIconColor.SILVER} />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","import ContactForm from './ContactForm';\r\n\r\nexport * from './ContactForm.types.d';\r\nexport default ContactForm;\r\n","/* eslint-disable no-underscore-dangle */\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { Col, Form, Row } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment, { Moment } from 'moment';\r\n\r\nimport Button from '@/components/Button';\r\nimport Input from '@/components/Input';\r\nimport { showNotification, validationRules } from '@/utils/functions';\r\nimport Select from '@/components/Select';\r\nimport DatePicker from '@/components/DatePicker';\r\nimport TextArea from '@/components/TextArea';\r\nimport { ETypeNotification } from '@/common/enums';\r\nimport { ERequestAdvisoryAction, getAdvisoryIssuesAction, requestAdvisoryAction } from '@/redux/actions';\r\nimport { TRootState } from '@/redux/reducers';\r\nimport { DEFAULT_PAGE } from '@/common/constants';\r\n\r\nimport { TContactFormProps } from './ContactForm.types.d';\r\nimport './ContactForm.scss';\r\n\r\nconst ContactForm: React.FC<TContactFormProps> = () => {\r\n  const dispatch = useDispatch();\r\n  const [form] = Form.useForm();\r\n\r\n  const profileState = useSelector((state: TRootState) => state.profileReducer.getProfileResponse)?.data;\r\n  const getAdvisoryIssuesState = useSelector(\r\n    (state: TRootState) => state.advisoryReducer.getAdvisoryIssuesResponse?.data?.records,\r\n  );\r\n  const requestAdvisoryLoading = useSelector(\r\n    (state: TRootState) => state.loadingReducer[ERequestAdvisoryAction.REQUEST_ADVISORY],\r\n  );\r\n\r\n  const advisoryIssuesOptions = getAdvisoryIssuesState?.map((item) => ({ label: item.name, value: item._id }));\r\n\r\n  const handleSubmit = (values: any): void => {\r\n    const body = {\r\n      ...values,\r\n      issueType: values.issueType?.value,\r\n    };\r\n\r\n    dispatch(requestAdvisoryAction.request({ body }, handleRequestAdvisorySuccess));\r\n  };\r\n\r\n  const handleRequestAdvisorySuccess = (): void => {\r\n    showNotification(ETypeNotification.SUCCESS, 'Gửi yêu cầu tư vấn thành công');\r\n    form.resetFields();\r\n  };\r\n\r\n  const disabledDate = (date: Moment): boolean => {\r\n    return date && date.valueOf() < moment().subtract(1, 'd').valueOf();\r\n  };\r\n\r\n  const getAdvisoryIssues = useCallback(() => {\r\n    const params = {\r\n      page: DEFAULT_PAGE,\r\n      pageSize: 100,\r\n    };\r\n\r\n    dispatch(getAdvisoryIssuesAction.request({ params }));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    getAdvisoryIssues();\r\n  }, [getAdvisoryIssues]);\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({\r\n      name: profileState?.name,\r\n    });\r\n  }, [form, profileState]);\r\n\r\n  return (\r\n    <div className=\"ContactForm\">\r\n      <div className=\"container\">\r\n        <div className=\"ContactForm-wrapper\">\r\n          <div className=\"ContactForm-title\">Tư vấn</div>\r\n          <Form form={form} className=\"ContactForm-form\" onFinish={handleSubmit}>\r\n            <Row gutter={[16, 16]}>\r\n              <Col span={24} sm={{ span: 12 }}>\r\n                <Form.Item name=\"name\" rules={[validationRules.required()]}>\r\n                  <Input label=\"Tên của bạn\" placeholder=\"Nhập tên\" />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={24} sm={{ span: 12 }}>\r\n                <Form.Item name=\"issueType\" rules={[validationRules.required()]}>\r\n                  <Select label=\"Vấn đề gặp phải\" placeholder=\"Chọn nguyên nhân\" options={advisoryIssuesOptions} />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={24} sm={{ span: 12 }}>\r\n                <Form.Item name=\"appointmentDate\" rules={[validationRules.required()]}>\r\n                  <DatePicker label=\"Đặt lịch tư vấn\" placeholder=\"Thời gian\" disabledDate={disabledDate} />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={24} sm={{ span: 12 }}>\r\n                <Form.Item name=\"contact\" rules={[validationRules.required(), validationRules.emailOrPhoneNumber()]}>\r\n                  <Input label=\"Liên hệ\" placeholder=\"Số điện thoại/Email\" />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col span={24}>\r\n                <Form.Item name=\"content\" rules={[validationRules.required()]}>\r\n                  <TextArea label=\"Nội dung tư vấn\" placeholder=\"Tóm tắt câu chuyện của bạn\" />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n\r\n            <div className=\"ContactForm-form-submit flex justify-center\">\r\n              <Button title=\"Đặt lịch tư vấn\" htmlType=\"submit\" disabled={requestAdvisoryLoading} />\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport { Col, Row } from 'antd';\r\n\r\nimport ImageContactBanner from '@/assets/images/image-contact.png';\r\nimport ContactForm from '@/containers/ContactForm';\r\n\r\nimport './Contact.scss';\r\n\r\nconst Contact: React.FC = () => {\r\n  return (\r\n    <div className=\"Contact\">\r\n      <div className=\"container\">\r\n        <div className=\"Contact-wrapper\">\r\n          <Row gutter={[20, 24]}>\r\n            <Col span={24} lg={{ span: 12 }}>\r\n              <div className=\"Contact-image\">\r\n                <img src={ImageContactBanner} alt=\"\" />\r\n              </div>\r\n            </Col>\r\n            <Col span={24} lg={{ span: 12 }}>\r\n              <ContactForm />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import Contact from './Contact';\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { Input } from 'antd';\r\n\r\nimport { TTextAreaProps } from '@/components/TextArea/TextArea.types';\r\n\r\nimport './TextArea.scss';\r\n\r\nconst { TextArea: AntdTextArea } = Input;\r\n\r\nconst TextArea: React.FC<TTextAreaProps> = ({ className, size, placeholder, label, onChange, value }) => {\r\n  return (\r\n    <div className={classNames('TextArea', className)}>\r\n      {label && <div className=\"TextArea-label\">{label}</div>}\r\n      <AntdTextArea size={size} placeholder={placeholder} value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n","import TextArea from './TextArea';\r\n\r\nexport * from './TextArea.types';\r\nexport default TextArea;\r\n"],"sourceRoot":""}