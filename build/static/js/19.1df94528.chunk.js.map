{"version":3,"sources":["components/Upload/Upload.tsx","components/UploadAvatar/index.ts","components/UploadAvatar/UploadAvatar.tsx","pages/AccountInformation/AccountInformation.tsx","pages/AccountInformation/index.ts"],"names":["Upload","className","accept","multiple","children","disabled","onChange","dispatch","useDispatch","inputFilesRef","useRef","uploadLoading","useSelector","state","loadingReducer","EUploadAction","UPLOAD","disabledUpload","handleUploadSuccess","response","current","value","data","classNames","onClick","click","ref","type","event","files","target","filesArray","Array","from","formData","FormData","forEach","item","append","uploadAction","request","body","UploadAvatar","useState","previewImage","setPreviewImage","useEffect","regex","url","test","fileId","fullUrl","src","ImageAvatarDefault","alt","onError","handleErrorImageUrl","Icon","name","EIconName","Camera","color","EIconColor","WHITE","AccountInformation","Form","useForm","formInformation","formPassword","profileState","profileReducer","getProfileResponse","updateProfileLoading","EUpdateProfileAction","UPDATE_PROFILE","changePasswordProfileLoading","EChangePasswordProfileAction","CHANGE_PASSWORD_PROFILE","passwordValue","setPasswordValue","handleUpdateProfileSuccess","showNotification","ETypeNotification","SUCCESS","getProfile","handleChangePasswordProfileSuccess","navigate","Paths","BooksLibrary","resetFields","useCallback","getProfileAction","setFieldsValue","avatar","undefined","gutter","span","lg","form","layout","onFinish","values","updateProfileAction","Item","rules","validationRules","required","Input","placeholder","label","onlyNumeric","Button","title","htmlType","loading","changePasswordProfileAction","e","confirmPassword"],"mappings":"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","file":"static/js/19.1df94528.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { EUploadAction, uploadAction } from '@/redux/actions';\r\nimport { TRootState } from '@/redux/reducers';\r\nimport { TUploadResponse } from '@/services/api';\r\n\r\nimport { TUploadProps } from './Upload.types';\r\nimport './Upload.scss';\r\n\r\nconst Upload: React.FC<TUploadProps> = ({ className, accept, multiple, children, disabled, onChange }) => {\r\n  const dispatch = useDispatch();\r\n  const inputFilesRef = useRef<HTMLInputElement>(null);\r\n\r\n  const uploadLoading = useSelector((state: TRootState) => state.loadingReducer[EUploadAction.UPLOAD]);\r\n  const disabledUpload = disabled || uploadLoading;\r\n\r\n  const handleClickUpload = (): void => {\r\n    if (!disabledUpload) inputFilesRef?.current?.click();\r\n  };\r\n\r\n  const handleChangeUpload = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { files } = event.target;\r\n    if (files) {\r\n      const filesArray = Array.from(files);\r\n      const formData = new FormData();\r\n      filesArray.forEach((item) => {\r\n        formData.append('file', item);\r\n      });\r\n      dispatch(uploadAction.request({ body: formData }, handleUploadSuccess));\r\n    }\r\n  };\r\n\r\n  const handleUploadSuccess = (response: TUploadResponse): void => {\r\n    if (inputFilesRef.current) inputFilesRef.current.value = '';\r\n    onChange?.(response.data);\r\n  };\r\n\r\n  return (\r\n    <div className={classNames('Upload', { disabled: disabledUpload }, className)}>\r\n      <div className=\"Upload-wrapper\" onClick={handleClickUpload}>\r\n        {children}\r\n      </div>\r\n      <input\r\n        ref={inputFilesRef}\r\n        className=\"Upload-input\"\r\n        accept={accept}\r\n        type=\"file\"\r\n        multiple={multiple}\r\n        onChange={handleChangeUpload}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Upload;\r\n","import UploadAvatar from './UploadAvatar';\r\n\r\nexport * from './UploadAvatar.types.d';\r\nexport default UploadAvatar;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport Icon, { EIconColor, EIconName } from '@/components/Icon';\r\nimport ImageAvatarDefault from '@/assets/images/image-avatar-default.svg';\r\n\r\nimport Upload from '@/components/Upload/Upload';\r\nimport { handleErrorImageUrl } from '@/utils/functions';\r\n\r\nimport { regex } from '@/common/constants';\r\nimport { TUploadAvatarProps } from './UploadAvatar.types.d';\r\nimport './UploadAvatar.scss';\r\n\r\nconst UploadAvatar: React.FC<TUploadAvatarProps> = ({ value, onChange }) => {\r\n  const [previewImage, setPreviewImage] = useState('');\r\n\r\n  const handleUploadChange = ({ fileId, fullUrl }: { fileId: string; fullUrl: string }): void => {\r\n    onChange?.(fileId);\r\n    setPreviewImage(fullUrl);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (value && regex.url.test(value)) setPreviewImage(value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className=\"UploadAvatar\">\r\n      <Upload accept=\".jpg, .jpeg, .png, .svg\" onChange={handleUploadChange}>\r\n        <div className=\"UploadAvatar-preview\">\r\n          <img src={previewImage || ImageAvatarDefault} alt=\"\" onError={handleErrorImageUrl} />\r\n        </div>\r\n\r\n        <div className=\"UploadAvatar-overlay flex items-center justify-center\">\r\n          <Icon name={EIconName.Camera} color={EIconColor.WHITE} />\r\n          Chỉnh sửa\r\n        </div>\r\n      </Upload>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadAvatar;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { navigate } from '@reach/router';\r\n\r\nimport { Col, Form, Row } from 'antd';\r\nimport { showNotification, validationRules } from '@/utils/functions';\r\nimport Input from '@/components/Input';\r\nimport UploadAvatar from '@/components/UploadAvatar';\r\nimport Button from '@/components/Button';\r\nimport { TRootState } from '@/redux/reducers';\r\nimport {\r\n  changePasswordProfileAction,\r\n  EChangePasswordProfileAction,\r\n  EUpdateProfileAction,\r\n  getProfileAction,\r\n  updateProfileAction,\r\n} from '@/redux/actions';\r\nimport { ETypeNotification } from '@/common/enums';\r\nimport { Paths } from '@/pages/routers';\r\n\r\nimport './AccountInformation.scss';\r\n\r\nconst AccountInformation: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [formInformation] = Form.useForm();\r\n  const [formPassword] = Form.useForm();\r\n\r\n  const profileState = useSelector((state: TRootState) => state.profileReducer.getProfileResponse)?.data;\r\n  const updateProfileLoading = useSelector(\r\n    (state: TRootState) => state.loadingReducer[EUpdateProfileAction.UPDATE_PROFILE],\r\n  );\r\n  const changePasswordProfileLoading = useSelector(\r\n    (state: TRootState) => state.loadingReducer[EChangePasswordProfileAction.CHANGE_PASSWORD_PROFILE],\r\n  );\r\n\r\n  const [passwordValue, setPasswordValue] = useState('');\r\n\r\n  const handleSubmitFormInformation = (values: any): void => {\r\n    const body = { ...values, avatar: values.avatar === profileState?.avatar ? undefined : values.avatar };\r\n    dispatch(updateProfileAction.request({ body }, handleUpdateProfileSuccess));\r\n  };\r\n\r\n  const handleUpdateProfileSuccess = (): void => {\r\n    showNotification(ETypeNotification.SUCCESS, 'Cập nhật thông tin cá nhân thành công');\r\n    getProfile();\r\n  };\r\n\r\n  const handleSubmitFormPassword = (values: any): void => {\r\n    const body = values;\r\n    dispatch(changePasswordProfileAction.request({ body }, handleChangePasswordProfileSuccess));\r\n  };\r\n\r\n  const handleChangePasswordProfileSuccess = (): void => {\r\n    showNotification(ETypeNotification.SUCCESS, 'Đổi mật khẩu tài khoản thành công');\r\n    setPasswordValue('');\r\n    navigate(Paths.BooksLibrary);\r\n    formPassword.resetFields();\r\n  };\r\n\r\n  const getProfile = useCallback(() => {\r\n    dispatch(getProfileAction.request({}));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    formInformation.setFieldsValue({ ...profileState, avatar: profileState?.avatar || undefined });\r\n  }, [profileState, formInformation]);\r\n\r\n  return (\r\n    <div className=\"AccountInformation\">\r\n      <div className=\"AccountInformation-wrapper\">\r\n        <Row gutter={[40, 40]}>\r\n          <Col span={24} lg={{ span: 12 }}>\r\n            <div className=\"AccountInformation-card\">\r\n              <div className=\"AccountInformation-card-header\">Thông tin cá nhân</div>\r\n              <div className=\"AccountInformation-card-body\">\r\n                <Form\r\n                  form={formInformation}\r\n                  layout=\"vertical\"\r\n                  className=\"AccountInformation-card-form\"\r\n                  onFinish={handleSubmitFormInformation}\r\n                >\r\n                  <Form.Item className=\"AccountInformation-card-form-avatar\" name=\"avatar\" rules={[]}>\r\n                    <UploadAvatar />\r\n                  </Form.Item>\r\n                  <br />\r\n                  <Form.Item name=\"name\" rules={[validationRules.required()]}>\r\n                    <Input placeholder=\"Nhập tên đăng nhập\" label=\"Tên đăng nhập\" />\r\n                  </Form.Item>\r\n\r\n                  <Form.Item name=\"phone\" rules={[validationRules.required(), validationRules.onlyNumeric()]}>\r\n                    <Input placeholder=\"Nhập số điện thoại\" label=\"Số điện thoại\" />\r\n                  </Form.Item>\r\n\r\n                  <div className=\"AccountInformation-form-submit\">\r\n                    <Button title=\"Chỉnh sửa\" htmlType=\"submit\" loading={updateProfileLoading} />\r\n                  </div>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col span={24} lg={{ span: 12 }}>\r\n            <div className=\"AccountInformation-card\">\r\n              <div className=\"AccountInformation-card-header\">Đổi mật khẩu</div>\r\n              <div className=\"AccountInformation-card-body\">\r\n                <Form\r\n                  form={formPassword}\r\n                  layout=\"vertical\"\r\n                  className=\"AccountInformation-card-form\"\r\n                  onFinish={handleSubmitFormPassword}\r\n                >\r\n                  <Form.Item name=\"password\" rules={[validationRules.required()]}>\r\n                    <Input type=\"password\" placeholder=\"Nhập mật khẩu hiện tại\" label=\"Mật khẩu hiện tại\" />\r\n                  </Form.Item>\r\n\r\n                  <Form.Item name=\"newPassword\" rules={[validationRules.required()]}>\r\n                    <Input\r\n                      type=\"password\"\r\n                      placeholder=\"Nhập mật khẩu mới\"\r\n                      label=\"Mật khẩu mới\"\r\n                      onChange={(e): void => setPasswordValue(e.target.value)}\r\n                    />\r\n                  </Form.Item>\r\n\r\n                  <Form.Item\r\n                    name=\"confirmNewPassword\"\r\n                    rules={[validationRules.required(), validationRules.confirmPassword(passwordValue)]}\r\n                  >\r\n                    <Input type=\"password\" placeholder=\"Nhập lại mật khẩu mới\" label=\"Xác nhận mật khẩu mới\" />\r\n                  </Form.Item>\r\n\r\n                  <div className=\"AccountInformation-form-submit\">\r\n                    <Button title=\"Hoàn thành\" htmlType=\"submit\" loading={changePasswordProfileLoading} />\r\n                  </div>\r\n                </Form>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountInformation;\r\n","import AccountInformation from './AccountInformation';\r\n\r\nexport default AccountInformation;\r\n"],"sourceRoot":""}